#include "gUtil.h"
#include "gUtil.h"

#pragma  choice type 0 "Turbulance Wavelet"
#pragma  choice type 1 "Multiband Projected"
#pragma  choice type 2 "Singe Band Wavelet" 
#pragma  choice type 3 "Projected Wavelet"



float
turbulancewavlete(vector pos; float rough; float myscale; int myoctaves; float blur; vector nn)
{

    float	scale, plimit, blend;
    int		octaves; 
    plimit = 2*blur; 
    float nval = 0; 
    vector pp = pos;
    octaves = 0;
    scale = myscale; 
    
    while (scale > plimit && octaves < myoctaves) 
    { 
	    nval += scale*(wlpnoise(pp, nn)); 
	    scale *= rough; 
	    pp *= 2; 
	    octaves++; 
	    //printf("%s", nval);
    } 
    if (scale > blur) 
    { 
	    blend = scale * clamp((scale/blur) - 1, 0, 0); 
	    nval += blend * (wlpnoise(pp, nn) - .5); 
    }  
    return nval;
}

surface
PixarWavelNoice(int type = 0;
      float rough = 1; 
      float scale = 1; 
      int octaves = 4;
      float blur  = .001;
      float ss    = -4;
      int   fb    = 1;
      vector w    = 1)
{
    
    vector on = ntransform("space:object", N);
    vector pp = ptransform("space:object", P);
    if (type == 0)
            Cf = fit(turbulancewavlete(pp*scale, rough, 1, octaves, blur, on), -1, 1, 0, 1);
    if (type == 1)
    {
            int myoctaves = clamp(octaves, 1, 3);
            Cf = wlmnoise(pp*scale, ss, on, fb, myoctaves, w); 
    }
    if (type == 2)
        Cf   = wlnoise(pp*scale);
    if (type == 3)
        Cf   = wlpnoise(pp*scale, on);

}
